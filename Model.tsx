/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 ./public/static/model.gltf -t 
*/

import * as THREE from "three";
import { GLTF } from "three-stdlib";
import React from "react";
import {
  Text,
  Html,
  ContactShadows,
  PresentationControls,
  Float,
  Environment,
  useGLTF,
} from "@react-three/drei";

type GLTFResult = GLTF & {
  nodes: {
    Circle001: THREE.Mesh;
    Circle001_1: THREE.Mesh;
    Circle001_2: THREE.Mesh;
    Circle001_3: THREE.Mesh;
    Circle001_4: THREE.Mesh;
    Circle001_5: THREE.Mesh;
    Circle001_6: THREE.Mesh;
    Circle006: THREE.Mesh;
    Circle006_1: THREE.Mesh;
    FrontCameraRing001: THREE.Mesh;
    Circle: THREE.Mesh;
    Circle_1: THREE.Mesh;
    Circle_2: THREE.Mesh;
    KeyboardKeyHole: THREE.Mesh;
    RubberFoot: THREE.Mesh;
    Circle012: THREE.Mesh;
    Circle012_1: THREE.Mesh;
    Circle009: THREE.Mesh;
    Circle009_1: THREE.Mesh;
    Circle003: THREE.Mesh;
    Circle003_1: THREE.Mesh;
    Circle002: THREE.Mesh;
    Circle002_1: THREE.Mesh;
    Circle002_2: THREE.Mesh;
    Circle002_3: THREE.Mesh;
    Circle002_4: THREE.Mesh;
    AppleLogo000: THREE.Mesh;
  };
  materials: {
    ["Frame.001"]: THREE.MeshStandardMaterial;
    HeadPhoneHole: THREE.MeshStandardMaterial;
    USB_C_INSIDE: THREE.MeshStandardMaterial;
    TouchbarBorder: THREE.MeshStandardMaterial;
    Keyboard: THREE.MeshStandardMaterial;
    ["CameraRIngBlack.002"]: THREE.MeshStandardMaterial;
    ["Keyboard.001"]: THREE.MeshStandardMaterial;
    Key: THREE.MeshStandardMaterial;
    Touchbar: THREE.MeshStandardMaterial;
    DarkRubber: THREE.MeshStandardMaterial;
    HingeBlack: THREE.MeshStandardMaterial;
    HingeMetal: THREE.MeshStandardMaterial;
    SpeakerHole: THREE.MeshStandardMaterial;
    ["Frame.001"]: THREE.MeshStandardMaterial;
    Screen: THREE.MeshStandardMaterial;
    ScreenGlass: THREE.MeshStandardMaterial;
    Rubber: THREE.MeshStandardMaterial;
    DisplayGlass: THREE.MeshStandardMaterial;
    ["AppleLogo.004"]: THREE.MeshStandardMaterial;
  };
  animations: any;
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function Model(props: JSX.IntrinsicElements["group"]) {
  const computer = useGLTF("/model.gltf") as GLTFResult;
  return (
    <>
      <Environment preset="city" />

      <PresentationControls
        global
        rotation={[0.13, 0.1, 0]}
        polar={[-0.4, 0.2]}
        azimuth={[-1, 0.75]}
        config={{ mass: 2, tension: 400 }}
        snap={{ mass: 4, tension: 400 }}
      >
        <Float rotationIntensity={0.4}>
          <rectAreaLight
            width={2.5}
            height={1.65}
            intensity={65}
            color={"#ff6900"}
            rotation={[-0.1, Math.PI, 0]}
            position={[0, 0.55, -1.15]}
          />

          <primitive
            object={computer.scene}
            position-y={-0.8}
            position-z={2}
            rotation-x={0.13}
            rotation-y={-0.4}
          >
            {/* <Html
              transform
              wrapperClass="htmlScreen"
              distanceFactor={1}
              position={[0, 2, -1.4]}
              rotation-x={-0.25}
              // scale={4}
            >
              <iframe src="https://mikeswebdeveloperportfolio.com/copy" />
            </Html> */}
          </primitive>
        </Float>
      </PresentationControls>

      {/* <ContactShadows position-y={-1.4} opacity={0.4} scale={5} blur={2.4} /> */}
    </>
  );
}

useGLTF.preload("/model.gltf");
